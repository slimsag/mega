From f58189f46ca46c7a4b2e351c30583d4b27e13e7c Mon Sep 17 00:00:00 2001
From: Robert Ogden <robertogden@chromium.org>
Date: Fri, 28 Jul 2023 11:25:41 -0700
Subject: [PATCH] remove dart exceptions

---
 .../third_party/darts_clone/include/darts.h   | 55 ++++++-------------
 1 file changed, 16 insertions(+), 39 deletions(-)

diff --git a/third_party/sentencepiece/src/third_party/darts_clone/include/darts.h b/third_party/sentencepiece/src/third_party/darts_clone/include/darts.h
index 8892aaaa01d47..7266919429045 100644
--- a/third_party/sentencepiece/src/third_party/darts_clone/include/darts.h
+++ b/third_party/sentencepiece/src/third_party/darts_clone/include/darts.h
@@ -5,18 +5,9 @@
 #include <exception>
 #include <new>
 
-#define DARTS_VERSION "0.32"
+#include "absl/log/absl_check.h"
 
-// DARTS_THROW() throws a <Darts::Exception> whose message starts with the
-// file name and the line number. For example, DARTS_THROW("error message") at
-// line 123 of "darts.h" throws a <Darts::Exception> which has a pointer to
-// "darts.h:123: exception: error message". The message is available by using
-// what() as well as that of <std::exception>.
-#define DARTS_INT_TO_STR(value) #value
-#define DARTS_LINE_TO_STR(line) DARTS_INT_TO_STR(line)
-#define DARTS_LINE_STR DARTS_LINE_TO_STR(__LINE__)
-#define DARTS_THROW(msg) throw Darts::Details::Exception( \
-  __FILE__ ":" DARTS_LINE_STR ": exception: " msg)
+#define DARTS_VERSION "0.32"
 
 namespace Darts {
 
@@ -376,14 +367,9 @@ int DoubleArrayImpl<A, B, T, C>::open(const char *file_name,
   }
 
   unit_type *buf;
-  try {
-    buf = new unit_type[size];
-    for (id_type i = 0; i < 256; ++i) {
-      buf[i] = units[i];
-    }
-  } catch (const std::bad_alloc &) {
-    std::fclose(file);
-    DARTS_THROW("failed to open double-array: std::bad_alloc");
+  buf = new unit_type[size];
+  for (id_type i = 0; i < 256; ++i) {
+    buf[i] = units[i];
   }
 
   if (size > 256) {
@@ -697,11 +683,7 @@ void AutoPool<T>::resize_buf(std::size_t size) {
   }
 
   AutoArray<char> buf;
-  try {
-    buf.reset(new char[sizeof(T) * capacity]);
-  } catch (const std::bad_alloc &) {
-    DARTS_THROW("failed to resize pool: std::bad_alloc");
-  }
+  buf.reset(new char[sizeof(T) * capacity]);
 
   if (size_ > 0) {
     T *src = reinterpret_cast<T *>(&buf_[0]);
@@ -836,11 +818,7 @@ class BitVector {
 };
 
 inline void BitVector::build() {
-  try {
-    ranks_.reset(new id_type[units_.size()]);
-  } catch (const std::bad_alloc &) {
-    DARTS_THROW("failed to build rank index: std::bad_alloc");
-  }
+  ranks_.reset(new id_type[units_.size()]);
 
   num_ones_ = 0;
   for (std::size_t i = 0; i < units_.size(); ++i) {
@@ -1138,9 +1116,9 @@ inline void DawgBuilder::finish() {
 inline void DawgBuilder::insert(const char *key, std::size_t length,
     value_type value) {
   if (value < 0) {
-    DARTS_THROW("failed to insert key: negative value");
+    ABSL_CHECK(false) << "failed to insert key: negative value";
   } else if (length == 0) {
-    DARTS_THROW("failed to insert key: zero-length key");
+    ABSL_CHECK(false) << "failed to insert key: zero-length key";
   }
 
   id_type id = 0;
@@ -1154,12 +1132,12 @@ inline void DawgBuilder::insert(const char *key, std::size_t length,
 
     uchar_type key_label = static_cast<uchar_type>(key[key_pos]);
     if (key_pos < length && key_label == '\0') {
-      DARTS_THROW("failed to insert key: invalid null character");
+      ABSL_CHECK(false) << "failed to insert key: invalid null character";
     }
 
     uchar_type unit_label = nodes_[child_id].label();
     if (key_label < unit_label) {
-      DARTS_THROW("failed to insert key: wrong key order");
+      ABSL_CHECK(false) << "failed to insert key: wrong key order";
     } else if (key_label > unit_label) {
       nodes_[child_id].set_has_sibling(true);
       flush(child_id);
@@ -1377,7 +1355,7 @@ class DoubleArrayBuilderUnit {
   }
   void set_offset(id_type offset) {
     if (offset >= 1U << 29) {
-      DARTS_THROW("failed to modify unit: too large offset");
+      ABSL_CHECK(false) << "failed to modify unit: too large offset";
     }
     unit_ &= (1U << 31) | (1U << 8) | 0xFF;
     if (offset < 1U << 21) {
@@ -1722,10 +1700,10 @@ id_type DoubleArrayBuilder::arrange_from_keyset(const Keyset<T> &keyset,
     uchar_type label = keyset.keys(i, depth);
     if (label == '\0') {
       if (keyset.has_lengths() && depth < keyset.lengths(i)) {
-        DARTS_THROW("failed to build double-array: "
-            "invalid null character");
+        ABSL_CHECK(false)
+            << "failed to build double-array: invalid null character";
       } else if (keyset.values(i) < 0) {
-        DARTS_THROW("failed to build double-array: negative value");
+        ABSL_CHECK(false) << "failed to build double-array: negative value";
       }
 
       if (value == -1) {
@@ -1740,7 +1718,7 @@ id_type DoubleArrayBuilder::arrange_from_keyset(const Keyset<T> &keyset,
       labels_.append(label);
     } else if (label != labels_[labels_.size() - 1]) {
       if (label < labels_[labels_.size() - 1]) {
-        DARTS_THROW("failed to build double-array: wrong key order");
+        ABSL_CHECK(false) << "failed to build double-array: wrong key order";
       }
       labels_.append(label);
     }
@@ -1921,6 +1899,5 @@ int DoubleArrayImpl<A, B, T, C>::build(std::size_t num_keys,
 #undef DARTS_INT_TO_STR
 #undef DARTS_LINE_TO_STR
 #undef DARTS_LINE_STR
-#undef DARTS_THROW
 
 #endif  // DARTS_H_
-- 
2.41.0.487.g6d72f3e995-goog

