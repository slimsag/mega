// Copyright 2020 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package org.chromium.chrome.browser.omnibox.suggestions.carousel;

import android.content.res.Configuration;
import android.content.res.Resources;

import androidx.annotation.NonNull;

import org.chromium.chrome.browser.omnibox.OmniboxFeatures;
import org.chromium.chrome.browser.omnibox.R;
import org.chromium.chrome.browser.omnibox.styles.OmniboxResourceProvider;
import org.chromium.chrome.browser.omnibox.suggestions.SuggestionCommonProperties;
import org.chromium.chrome.browser.omnibox.suggestions.SuggestionCommonProperties.FormFactor;
import org.chromium.chrome.browser.omnibox.suggestions.base.SpacingRecyclerViewItemDecoration;
import org.chromium.ui.modelutil.PropertyKey;
import org.chromium.ui.modelutil.PropertyModel;
import org.chromium.ui.modelutil.SimpleRecyclerViewAdapter;

/**
 * Binder for the Carousel suggestions.
 */
public final class BaseCarouselSuggestionViewBinder {
    private static int sTileViewPadding = -1;
    /** @see PropertyModelChangeProcessor.ViewBinder#bind(Object, Object, Object) */
    public static void bind(PropertyModel model, BaseCarouselSuggestionView view, PropertyKey key) {
        // Initialize resources we will be frequently accessing.
        if (sTileViewPadding < 0) {
            sTileViewPadding = view.getResources().getDimensionPixelSize(R.dimen.tile_view_padding);
        }

        if (key == BaseCarouselSuggestionViewProperties.TILES) {
            var items = model.get(BaseCarouselSuggestionViewProperties.TILES);
            var adapter = (SimpleRecyclerViewAdapter) view.getAdapter();
            if (items != null) {
                adapter.getModelList().set(items);
            } else {
                adapter.getModelList().clear();
            }
        } else if (key == SuggestionCommonProperties.DEVICE_FORM_FACTOR) {
            int itemDecoration = view.getItemDecorationCount();
            while (itemDecoration > 0) {
                itemDecoration--;
                view.removeItemDecorationAt(itemDecoration);
            }

            var context = view.getContext();
            // Adjust the initial offset of the MV Carousel to match the offset of the
            // suggestion header.
            int initialSpacing = OmniboxFeatures.shouldShowModernizeVisualUpdate(context)
                    ? OmniboxResourceProvider.getHeaderStartPadding(context) - sTileViewPadding
                    : OmniboxResourceProvider.getSideSpacing(context);
            int itemSpacing = getItemSpacingPx(
                    model.get(SuggestionCommonProperties.DEVICE_FORM_FACTOR), view.getResources());
            view.addItemDecoration(
                    new SpacingRecyclerViewItemDecoration(initialSpacing, itemSpacing / 2));
        } else if (key == BaseCarouselSuggestionViewProperties.HORIZONTAL_FADE) {
            view.setHorizontalFadingEdgeEnabled(
                    model.get(BaseCarouselSuggestionViewProperties.HORIZONTAL_FADE));
        }
    }

    /**
     * Calculate the margin between tiles based on screen size.
     *
     * @param formFactor the form factor of the device, from which we differentiate between PHONE
     *         and TABLET.
     * @param resources Android resources object, used to read the dimension.
     * @return The requested item spacing, expressed in Pixels.
     */
    static int getItemSpacingPx(@FormFactor int formFactor, @NonNull Resources resources) {
        // Note: Tile suggestions are generated by native code.
        if (resources.getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
            return resources.getDimensionPixelOffset(R.dimen.tile_view_padding_landscape);
        }

        int tileViewPortraitEdgePadding =
                resources.getDimensionPixelSize(R.dimen.tile_view_padding_edge_portrait);
        switch (formFactor) {
            case FormFactor.PHONE:
                int screenWidth = resources.getDisplayMetrics().widthPixels;
                int tileViewWidth = resources.getDimensionPixelOffset(R.dimen.tile_view_width);
                return Integer.max(-resources.getDimensionPixelOffset(R.dimen.tile_view_padding),
                        (int) ((screenWidth - tileViewPortraitEdgePadding - tileViewWidth * 4.5)
                                / 4));
            case FormFactor.TABLET:
                return tileViewPortraitEdgePadding;
            default:
                assert false : "Unknown device type";
                return 0;
        }
    }
}
